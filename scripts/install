#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_docker_image_extract
source ynh_python_install
source /usr/share/yunohost/helpers

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

ynh_app_setting_set --app="$app" --key=password --value="$password"

admin_email=$(ynh_user_get_info --username="$admin" --key="mail")
ynh_app_setting_set --app="$app" --key=admin_email --value="$admin_email"

ynh_user="${app}_notifs"
ynh_app_setting_set --app="$app" --key="ynh_user" --value="$ynh_user"
ynh_user_password=$(ynh_string_random --length=30)
ynh_app_setting_set --app="$app" --key="ynh_user_password" --value="$ynh_user_password"

jwt_secret=$(ynh_string_random --length=30)
ynh_app_setting_set --app="$app" --key="jwt_secret" --value="$jwt_secret"

supabase_password=$(ynh_string_random --length=30)
ynh_app_setting_set --app="$app" --key="supabase_password" --value="$supabase_password"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression "Configuring YunoHost users..."

yunohost user create "$ynh_user" -F "AppFlowy Notifications" --domain "$domain" --password "$ynh_user_password" -q 0
yunohost user update "$ynh_user" --add-mailalias "$app@$domain" --add-mailforward "$admin_email"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

# Download, check integrity, uncompress and patch the source from manifest.toml
ynh_setup_source --dest_dir="$install_dir/appflowy_minio" --source_id="minio"
chmod +x "$install_dir/appflowy_minio/minio"

ynh_setup_source --dest_dir="$install_dir/build/pgvector" --source_id="pgvector" 

docker_version="$(ynh_app_upstream_version)"
#frontend_url="$(ynh_read_manifest 'resources.sources.frontend.url')"
#docker_version_web="$(echo "$frontend_url" | sed -E 's/.*\/v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
docker_version_web=0.1.13

ynh_docker_image_extract --dest_dir="$install_dir/build/gotrue/" --image_spec="appflowyinc/gotrue:$docker_version"
mkdir -p $install_dir/appflowy_gotrue/migrations/
cp $install_dir/build/gotrue/auth $install_dir/appflowy_gotrue/appflowy_gotrue
rsync -a --delete $install_dir/build/gotrue/migrations/ $install_dir/appflowy_gotrue/migrations/
ynh_safe_rm "$install_dir/build/gotrue/"

ynh_docker_image_extract --dest_dir="$install_dir/build/appflowy_ai/" --image_spec="appflowyinc/appflowy_ai:0.6.16"
mkdir -p $install_dir/appflowy_ai/
rsync -a --delete $install_dir/build/appflowy_ai/usr/src/app/ $install_dir/appflowy_ai/
ynh_safe_rm "$install_dir/build/appflowy_ai/"

ynh_docker_image_extract --dest_dir="$install_dir/build/appflowy_worker/" --image_spec="appflowyinc/appflowy_worker:$docker_version"
mkdir -p $install_dir/appflowy_worker/
cp $install_dir/build/appflowy_worker/usr/local/bin/appflowy_worker $install_dir/appflowy_worker/appflowy_worker
ynh_safe_rm "$install_dir/build/appflowy_worker/"

ynh_docker_image_extract --dest_dir="$install_dir/build/appflowy_cloud/" --image_spec="appflowyinc/appflowy_cloud:$docker_version"
mkdir -p $install_dir/appflowy_cloud/
cp $install_dir/build/appflowy_cloud/usr/local/bin/appflowy_cloud $install_dir/appflowy_cloud/appflowy_cloud
ynh_safe_rm "$install_dir/build/appflowy_cloud/"

ynh_docker_image_extract --dest_dir="$install_dir/build/admin_frontend/" --image_spec="appflowyinc/admin_frontend:$docker_version"
mkdir -p $install_dir/appflowy_admin_frontend/assets/
cp $install_dir/build/admin_frontend/usr/local/bin/admin_frontend $install_dir/appflowy_admin_frontend/appflowy_admin_frontend
rsync -a --delete $install_dir/build/admin_frontend/app/assets/ $install_dir/appflowy_admin_frontend/assets/
ynh_safe_rm "$install_dir/build/admin_frontend/"

#ynh_docker_image_extract --dest_dir="$install_dir/build/appflowy_web/" --image_spec="appflowyinc/appflowy_web:$docker_version_web"
#mkdir -p $install_dir/appflowy_web/
#cp $install_dir/build/appflowy_cloud/usr/local/bin/appflowy_cloud $install_dir/appflowy_cloud/appflowy_cloud
#ynh_safe_rm "$install_dir/build/appflowy_cloud/"
ynh_setup_source --dest_dir="$install_dir/appflowy_web" --source_id="frontend"

ynh_python_install

ynh_nodejs_install

#=================================================
# APP INITIAL CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration files..."

ynh_config_add --template="appflowy_minio.env" --destination="$install_dir/appflowy_minio/.env"
chmod 400 "$install_dir/appflowy_minio/.env"
chown "$app:$app" "$install_dir/appflowy_minio/.env"

local_hostname=$(hostname)
ynh_config_add --template="appflowy_gotrue.env" --destination="$install_dir/appflowy_gotrue/.env"
chmod 400 "$install_dir/appflowy_gotrue/.env"
chown "$app:$app" "$install_dir/appflowy_gotrue/.env"

ynh_config_add --template="appflowy_ai.env" --destination="$install_dir/appflowy_ai/.env"
chmod 400 "$install_dir/appflowy_ai/.env"
chown "$app:$app" "$install_dir/appflowy_ai/.env"

ynh_config_add --template="appflowy_worker.env" --destination="$install_dir/appflowy_worker/.env"
chmod 400 "$install_dir/appflowy_worker/.env"
chown "$app:$app" "$install_dir/appflowy_worker/.env"

ynh_config_add --template="appflowy_cloud.env" --destination="$install_dir/appflowy_cloud/.env"
chmod 400 "$install_dir/appflowy_cloud/.env"
chown "$app:$app" "$install_dir/appflowy_cloud/.env"

ynh_config_add --template="appflowy_admin_frontend.env" --destination="$install_dir/appflowy_admin_frontend/.env"
chmod 400 "$install_dir/appflowy_admin_frontend/.env"
chown "$app:$app" "$install_dir/appflowy_admin_frontend/.env"

ynh_config_add --template="appflowy_web.env" --destination="$install_dir/appflowy_web/.env"
chmod 400 "$install_dir/appflowy_web/.env"
chown "$app:$app" "$install_dir/appflowy_web/.env"

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

# Create a dedicated NGINX config using the conf/nginx.conf template
ynh_config_add_nginx

# Create a dedicated systemd config
ynh_config_add_systemd --service="${app}_minio" --template="appflowy_minio.service"
yunohost service add ${app}_minio --description="AppFlowy-MinIO storage" --log="/var/log/$app/${app}_minio.log"

ynh_config_add_systemd --service="${app}_gotrue" --template="appflowy_gotrue.service"
yunohost service add ${app}_gotrue --description="AppFlowy-Gotrue Authentication" --log="/var/log/$app/${app}_gotrue.log"

ynh_config_add_systemd --service="${app}_ai" --template="appflowy_ai.service"
yunohost service add ${app}_ai --description="AppFlowy-Ai" --log="/var/log/$app/${app}_ai.log"

ynh_config_add_systemd --service="${app}_worker" --template="appflowy_worker.service"
yunohost service add ${app}_worker --description="AppFlowy-Worker" --log="/var/log/$app/${app}_worker.log"

ynh_config_add_systemd --service="${app}_cloud" --template="appflowy_cloud.service"
yunohost service add ${app}_cloud --description="AppFlowy-Cloud" --log="/var/log/$app/${app}_cloud.log"

ynh_config_add_systemd --service="${app}_admin_frontend" --template="appflowy_admin_frontend.service"
yunohost service add ${app}_admin_frontend --description="AppFlowy-Admin-Frontend" --log="/var/log/$app/${app}_admin_frontend.log"

ynh_config_add_systemd --service="${app}_web" --template="appflowy_web.service"
yunohost service add ${app}_web --description="AppFlowy-Web" --log="/var/log/$app/${app}_web.log"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

#=================================================
# BUILD APP
#=================================================
ynh_script_progression "Building app..."

# Installing pgvector
pushd "$install_dir/build/pgvector"
    export PG_MAJOR_VERSION=$(sudo --login --user=postgres psql -t -c "SELECT current_setting('server_version_num')::int / 10000;" | xargs)
    export PG_CONFIG="/usr/lib/postgresql/$PG_MAJOR_VERSION/bin/pg_config"
    make
    make install
popd

ynh_safe_rm "$install_dir/build/"

# Initializing Gotrue
ynh_psql_db_shell $db_name  <<<  "
    CREATE OR REPLACE FUNCTION create_roles(roles text []) RETURNS void LANGUAGE plpgsql AS \$\$
    DECLARE role_name text;
    BEGIN FOREACH role_name IN ARRAY roles LOOP IF NOT EXISTS (
        SELECT 1
        FROM pg_roles
        WHERE rolname = role_name
    ) THEN EXECUTE 'CREATE ROLE ' || role_name;
    END IF;
    END LOOP;
    END;
    \$\$;
    DO \$\$ BEGIN IF NOT EXISTS (
        SELECT
        FROM pg_catalog.pg_roles
        WHERE rolname = 'supabase_auth_admin'
    ) THEN CREATE USER supabase_auth_admin BYPASSRLS NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;
    END \$\$;

    CREATE SCHEMA IF NOT EXISTS auth AUTHORIZATION supabase_auth_admin;
    GRANT USAGE ON SCHEMA auth TO $db_user;
    GRANT CREATE ON DATABASE $db_name TO supabase_auth_admin;
    GRANT supabase_auth_admin TO $db_user;
    ALTER USER supabase_auth_admin SET search_path = 'auth';
    ALTER USER supabase_auth_admin WITH PASSWORD '$supabase_password';
    CREATE EXTENSION IF NOT EXISTS vector;
"
ynh_systemctl --service="${app}_gotrue" --action="start" --log_path="/var/log/$app/${app}_gotrue.log" --wait_until="GoTrue API started"
(   
    set -a; source $install_dir/appflowy_gotrue/.env; set +a
    $install_dir/appflowy_gotrue/appflowy_gotrue admin createuser --admin --confirm $admin_email $password
)
ynh_systemctl --service="${app}_gotrue" --action="stop"

# Installing ai
pushd "$install_dir/appflowy_ai"
	PATH=$path_with_python pip install --no-cache-dir poetry
	cd server
	PATH=$path_with_python poetry config virtualenvs.create false && PATH=$path_with_python poetry install --no-root
popd

chown -R "$app:www-data" "$install_dir"

# Installing web UI
pushd "$install_dir/appflowy_web"
    ynh_hide_warnings corepack enable
    ynh_hide_warnings ynh_exec_as_app corepack prepare pnpm@8.5.0 --activate
    ynh_hide_warnings ynh_exec_as_app env NODE_ENV=production pnpm install
    ynh_hide_warnings ynh_exec_as_app env NODE_ENV=production pnpm run build
popd
#chown "$app:$app" "$install_dir/appflowy_web/package.json"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

# Start a systemd service
ynh_systemctl --service="${app}_minio" --action="start" --log_path="/var/log/$app/${app}_minio.log" --wait_until="WebUI:"
ynh_systemctl --service="${app}_gotrue" --action="start" --log_path="/var/log/$app/${app}_gotrue.log" --wait_until="GoTrue API started"
ynh_systemctl --service="${app}_ai" --action="start" --log_path="/var/log/$app/${app}_ai.log" --wait_until="Uvicorn running"
ynh_systemctl --service="${app}_worker" --action="start" --log_path="/var/log/$app/${app}_worker.log" --wait_until="Starting importer worker"
ynh_systemctl --service="${app}_cloud" --action="start" --log_path="/var/log/$app/${app}_cloud.log" --wait_until="Server started"
ynh_systemctl --service="${app}_admin_frontend" --action="start" --log_path="/var/log/$app/${app}_admin_frontend.log" --wait_until="listening on"
ynh_systemctl --service="${app}_web" --action="start" --log_path="/var/log/$app/${app}_web.log" --wait_until=""

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
