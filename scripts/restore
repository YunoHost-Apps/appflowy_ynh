#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

# Keep this path for calling _common.sh inside the execution's context of backup and restore scripts
source ../settings/scripts/_common.sh
source ../settings/scripts/ynh_python_install
source /usr/share/yunohost/helpers

#=================================================
# RESTORE THE APP MAIN DIR
#=================================================
ynh_script_progression "Restoring the app main directory..."

ynh_restore "$install_dir"

#=================================================
# RESTORE THE DATA DIRECTORY
#=================================================
ynh_script_progression "Restoring the data directory..."

ynh_restore "$data_dir"

#=================================================
# RESTORE THE POSTGRESQL DATABASE
#=================================================
ynh_script_progression "Restoring the PostgreSQL database..."

ynh_setup_source --dest_dir="$install_dir/build/pgvector" --source_id="pgvector" 
# Installing pgvector
pushd "$install_dir/build/pgvector"
	make
	make install
popd

ynh_safe_rm "$install_dir/build/"

# Initializing Gotrue
ynh_psql_db_shell $db_name  <<<  "
    CREATE OR REPLACE FUNCTION create_roles(roles text []) RETURNS void LANGUAGE plpgsql AS \$\$
    DECLARE role_name text;
    BEGIN FOREACH role_name IN ARRAY roles LOOP IF NOT EXISTS (
        SELECT 1
        FROM pg_roles
        WHERE rolname = role_name
    ) THEN EXECUTE 'CREATE ROLE ' || role_name;
    END IF;
    END LOOP;
    END;
    \$\$;
    DO \$\$ BEGIN IF NOT EXISTS (
        SELECT
        FROM pg_catalog.pg_roles
        WHERE rolname = 'supabase_auth_admin'
    ) THEN CREATE USER supabase_auth_admin BYPASSRLS NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;
    END \$\$;

    CREATE SCHEMA IF NOT EXISTS auth AUTHORIZATION supabase_auth_admin;
    GRANT USAGE ON SCHEMA auth TO $db_user;
    GRANT CREATE ON DATABASE $db_name TO supabase_auth_admin;
    GRANT supabase_auth_admin TO $db_user;
    ALTER USER supabase_auth_admin SET search_path = 'auth';
    ALTER USER supabase_auth_admin WITH PASSWORD '$supabase_password';
    CREATE EXTENSION IF NOT EXISTS vector;
"

ynh_psql_db_shell < ./db.sql

#=================================================
# RESTORE SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Restoring system configurations related to $app..."

ynh_restore "/etc/nginx/conf.d/$domain.d/$app.conf"

ynh_restore "/etc/systemd/system/${app}_minio.service"
systemctl enable "${app}_minio.service" --quiet
ynh_restore "/etc/systemd/system/${app}_gotrue.service"
systemctl enable "${app}_gotrue.service" --quiet
ynh_restore "/etc/systemd/system/${app}_ai.service"
systemctl enable "${app}_ai.service" --quiet
ynh_restore "/etc/systemd/system/${app}_worker.service"
systemctl enable "${app}_worker.service" --quiet
ynh_restore "/etc/systemd/system/${app}_cloud.service"
systemctl enable "${app}_cloud.service" --quiet
ynh_restore "/etc/systemd/system/${app}_admin_frontend.service"
systemctl enable "${app}_admin_frontend.service" --quiet
ynh_restore "/etc/systemd/system/${app}_web.service"
systemctl enable "${app}_web.service" --quiet

yunohost service add ${app}_minio --description="AppFlowy-MinIO storage" --log="/var/log/$app/${app}_minio.log"
yunohost service add ${app}_gotrue --description="AppFlowy-Gotrue Authentication" --log="/var/log/$app/${app}_gotrue.log"
yunohost service add ${app}_ai --description="AppFlowy-Ai" --log="/var/log/$app/${app}_ai.log"
yunohost service add ${app}_worker --description="AppFlowy-Worker" --log="/var/log/$app/${app}_worker.log"
yunohost service add ${app}_cloud --description="AppFlowy-Cloud" --log="/var/log/$app/${app}_cloud.log"
yunohost service add ${app}_admin_frontend --description="AppFlowy-Admin-Frontend" --log="/var/log/$app/${app}_admin_frontend.log"
yunohost service add ${app}_web --description="AppFlowy-Web" --log="/var/log/$app/${app}_web.log"

ynh_restore "/etc/logrotate.d/$app"

#=================================================
# RESTORE VARIOUS FILES
#=================================================

ynh_restore "/var/log/$app/"

# Installing ai
ynh_python_install
pushd "$install_dir/appflowy_ai"
	PATH=$path_with_python pip install --no-cache-dir poetry
	cd server
	PATH=$path_with_python poetry config virtualenvs.create false && PATH=$path_with_python poetry install --no-root
popd

chown -R "$app:www-data" "$install_dir"

# Installing web
ynh_nodejs_install
pushd "$install_dir/appflowy_web"
    ynh_hide_warnings corepack enable
    ynh_hide_warnings ynh_exec_as_app corepack prepare pnpm@8.5.0 --activate
    ynh_hide_warnings ynh_exec_as_app env pnpm install
    ynh_hide_warnings ynh_exec_as_app env pnpm run build
popd

#=================================================
# RELOAD NGINX AND PHP-FPM OR THE APP SERVICE
#=================================================
ynh_script_progression "Reloading NGINX web server and $app's service..."

ynh_systemctl --service="${app}_minio" --action="start" --log_path="/var/log/$app/${app}_minio.log" --wait_until="WebUI:"
ynh_systemctl --service="${app}_gotrue" --action="start" --log_path="/var/log/$app/${app}_gotrue.log" --wait_until="GoTrue API started"
ynh_systemctl --service="${app}_ai" --action="start" --log_path="/var/log/$app/${app}_ai.log" --wait_until="Uvicorn running"
ynh_systemctl --service="${app}_worker" --action="start" --log_path="/var/log/$app/${app}_worker.log" --wait_until="Starting importer worker"
ynh_systemctl --service="${app}_cloud" --action="start" --log_path="/var/log/$app/${app}_cloud.log" --wait_until="Server started"
ynh_systemctl --service="${app}_admin_frontend" --action="start" --log_path="/var/log/$app/${app}_admin_frontend.log" --wait_until="listening on"
ynh_systemctl --service="${app}_web" --action="start" --log_path="/var/log/$app/${app}_web.log"

ynh_systemctl --service=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Restoration completed for $app"
